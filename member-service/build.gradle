plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.farmted'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

ext {
	set('springCloudVersion', "2022.0.4")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.5'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// mysql-connector-j
	implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.0.33'
	// validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.1.5'
	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
	// eureka
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	// openFeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	// S3
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.609'
	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	// 암호화 라이브러리
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
	// Spring Cloud Config Client 의존성
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
}

tasks.named('test') {
	useJUnitPlatform()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jar {
	enabled = true
}

// QueryDsl 빌드 옵션
def querydslDir = "src/main/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}